{"version":3,"sources":["components/icons-elevator.jsx","utils/MovementEnum.js","components/Elevator.jsx","components/CallButton.jsx","utils/floorNames.js","App.js","reportWebVitals.js","utils/constants.js","scripts/Elevator.js","scripts/Floor.js","index.js","scripts/Board.js"],"names":["ElevatorIcon","xmlns","width","height","viewBox","d","MovementEnum","Object","freeze","idle","moving","suspended","Elevator","observer","props","elevator","thisElevator","board","elevators","className","movementStatus","CallButton","floor","isMoving","assignedElevator","isSuspended","onClick","sendElevator","id","getFloorName","floorNum","floorName","tens","hasTens","Math","App","map","index","i","floors","reverse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Constants","this","directionIsUp","previousFloor","currentFloor","targetFloor","intervalId","floorInstance","makeObservable","observable","goTo","action","suspend","move","moveOneFloor","changeMovementStatus","status","setElevator","setTimeout","clearElevator","queue","length","orderElevator","moveUp","placeElevator","console","log","setInterval","clearInterval","Floor","floorsNum","elevatorsNum","_generateBoard","_generateElevators","_generateFloors","placeElevatorsOnStart","e","push","f","forEach","shift","filter","reduce","prev","curr","abs","availableElevators","nextFromQueue","closestElevator","getClosestElevator","addToQueue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63eecf8c.chunk.js","sourcesContent":["export const ElevatorIcon = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30px\" height=\"20px\" viewBox=\"0 0 50 50\"><path d=\"M 15.875 0 C 15.617188 0.0351563 15.378906 0.167969 15.21875 0.375 L 10.21875 6.375 C 9.976563 6.675781 9.929688 7.085938 10.097656 7.433594 C 10.265625 7.78125 10.617188 8 11 8 L 21 8 C 21.382813 8 21.734375 7.78125 21.902344 7.433594 C 22.070313 7.085938 22.023438 6.675781 21.78125 6.375 L 16.78125 0.375 C 16.566406 0.101563 16.222656 -0.0429688 15.875 0 Z M 29.8125 0 C 29.460938 0.0625 29.171875 0.308594 29.046875 0.640625 C 28.925781 0.976563 28.992188 1.351563 29.21875 1.625 L 34.21875 7.625 C 34.410156 7.863281 34.695313 8 35 8 C 35.304688 8 35.589844 7.863281 35.78125 7.625 L 40.78125 1.625 C 41.023438 1.324219 41.070313 0.914063 40.902344 0.566406 C 40.734375 0.21875 40.382813 0 40 0 L 30 0 C 29.96875 0 29.9375 0 29.90625 0 C 29.875 0 29.84375 0 29.8125 0 Z M 32.125 2 L 37.875 2 L 35 5.4375 Z M 16 2.5625 L 18.875 6 L 13.125 6 Z M 3 10 C 1.355469 10 0 11.355469 0 13 L 0 47 C 0 48.644531 1.355469 50 3 50 L 47 50 C 48.644531 50 50 48.644531 50 47 L 50 13 C 50 11.355469 48.644531 10 47 10 Z M 3 12 L 47 12 C 47.554688 12 48 12.445313 48 13 L 48 47 C 48 47.554688 47.554688 48 47 48 L 3 48 C 2.445313 48 2 47.554688 2 47 L 2 13 C 2 12.445313 2.445313 12 3 12 Z M 11 14 C 8.800781 14 7 15.800781 7 18 C 7 20.199219 8.800781 22 11 22 C 13.199219 22 15 20.199219 15 18 C 15 15.800781 13.199219 14 11 14 Z M 11 22 C 7.675781 22 5 24.675781 5 28 L 5 35 C 4.996094 35.386719 5.214844 35.738281 5.5625 35.90625 L 7 36.625 L 7 45 C 7 45.550781 7.449219 46 8 46 L 14 46 C 14.550781 46 15 45.550781 15 45 L 15 36.625 L 16.4375 35.90625 C 16.785156 35.738281 17.003906 35.386719 17 35 L 17 28 C 17 24.675781 14.324219 22 11 22 Z M 25 14 C 22.800781 14 21 15.800781 21 18 C 21 20.199219 22.800781 22 25 22 C 27.199219 22 29 20.199219 29 18 C 29 15.800781 27.199219 14 25 14 Z M 25 22 C 21.675781 22 19 24.675781 19 28 L 19 35 C 18.996094 35.386719 19.214844 35.738281 19.5625 35.90625 L 21 36.625 L 21 45 C 21 45.550781 21.449219 46 22 46 L 28 46 C 28.550781 46 29 45.550781 29 45 L 29 36.625 L 30.4375 35.90625 C 30.785156 35.738281 31.003906 35.386719 31 35 L 31 28 C 31 24.675781 28.324219 22 25 22 Z M 39 14 C 36.800781 14 35 15.800781 35 18 C 35 20.199219 36.800781 22 39 22 C 41.199219 22 43 20.199219 43 18 C 43 15.800781 41.199219 14 39 14 Z M 39 22 C 35.675781 22 33 24.675781 33 28 L 33 35 C 32.996094 35.386719 33.214844 35.738281 33.5625 35.90625 L 35 36.625 L 35 45 C 35 45.550781 35.449219 46 36 46 L 42 46 C 42.550781 46 43 45.550781 43 45 L 43 36.625 L 44.4375 35.90625 C 44.785156 35.738281 45.003906 35.386719 45 35 L 45 28 C 45 24.675781 42.324219 22 39 22 Z M 11 16 C 12.117188 16 13 16.882813 13 18 C 13 19.117188 12.117188 20 11 20 C 9.882813 20 9 19.117188 9 18 C 9 16.882813 9.882813 16 11 16 Z M 25 16 C 26.117188 16 27 16.882813 27 18 C 27 19.117188 26.117188 20 25 20 C 23.882813 20 23 19.117188 23 18 C 23 16.882813 23.882813 16 25 16 Z M 39 16 C 40.117188 16 41 16.882813 41 18 C 41 19.117188 40.117188 20 39 20 C 37.882813 20 37 19.117188 37 18 C 37 16.882813 37.882813 16 39 16 Z M 11 24 C 13.277344 24 15 25.722656 15 28 L 15 34.375 L 13.5625 35.09375 C 13.214844 35.261719 12.996094 35.613281 13 36 L 13 44 L 9 44 L 9 36 C 9.003906 35.613281 8.785156 35.261719 8.4375 35.09375 L 7 34.375 L 7 28 C 7 25.722656 8.722656 24 11 24 Z M 25 24 C 27.277344 24 29 25.722656 29 28 L 29 34.375 L 27.5625 35.09375 C 27.214844 35.261719 26.996094 35.613281 27 36 L 27 44 L 23 44 L 23 36 C 23.003906 35.613281 22.785156 35.261719 22.4375 35.09375 L 21 34.375 L 21 28 C 21 25.722656 22.722656 24 25 24 Z M 39 24 C 41.277344 24 43 25.722656 43 28 L 43 34.375 L 41.5625 35.09375 C 41.214844 35.261719 40.996094 35.613281 41 36 L 41 44 L 37 44 L 37 36 C 37.003906 35.613281 36.785156 35.261719 36.4375 35.09375 L 35 34.375 L 35 28 C 35 25.722656 36.722656 24 39 24 Z\"/></svg>\n  )\n}\n\n","export const MovementEnum = Object.freeze({\r\n  idle: 0,\r\n  moving: 1,\r\n  suspended: 2,\r\n});\r\n","import {ElevatorIcon} from \"./icons-elevator\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { MovementEnum } from \"../utils/MovementEnum\";\r\n\r\nexport const Elevator = observer ((props) => {\r\n    const {elevator} = props \r\n    const thisElevator = props.board.elevators[elevator];\r\n\r\n    const getClass = () => {\r\n        if(thisElevator.movementStatus === MovementEnum.moving){\r\n            return \"elevator-moving\"\r\n        } else if(thisElevator.movementStatus === MovementEnum.suspended) {\r\n            return \"elevator-suspended\"\r\n        } else {\r\n            return \" \"\r\n        }\r\n    }\r\n    return (\r\n        <div className={`elevator ${getClass()}`}>\r\n            <ElevatorIcon className={`elevator-icon`} />\r\n        </div>\r\n)})","import { observer } from \"mobx-react-lite\";\r\nimport { MovementEnum } from \"../utils/MovementEnum\";\r\n\r\nexport const CallButton = observer((props) => {\r\n    const {board, floor} = props;\r\n    const isMoving = () =>{\r\n      return floor?.assignedElevator?.movementStatus === MovementEnum.moving\r\n    }\r\n\r\n    const isSuspended = () =>{\r\n      return floor?.assignedElevator?.movementStatus === MovementEnum.suspended\r\n    }\r\n\r\n    const sendElevator = () =>{\r\n      board.sendElevator(floor.id)\r\n    }\r\n\r\n    const getClass = () => { \r\n      if(isMoving()){\r\n          return \"floor-waiting\"\r\n      } else if(isSuspended()) {\r\n          return \"floor-arrived\"\r\n      } else {\r\n        return \"\"\r\n      }\r\n    }\r\n\r\n    const getText = () => {\r\n      if(isMoving()){\r\n          return \"Waiting\"\r\n      } else if(isSuspended()) {\r\n          return \"Arrived\"\r\n      } else {\r\n        return \"Call\"\r\n      }\r\n    }\r\n\r\n    return (\r\n        <button\r\n        className={`call-button ${getClass()}`}\r\n        onClick={sendElevator}\r\n      >\r\n        {getText()}\r\n      </button>\r\n)})","export const getFloorName = (floorNum) => {\r\n  let floorName = \"\";\r\n  let tens = \"\";\r\n  let hasTens = false;\r\n\r\n  if (floorNum > 20 && floorNum < 100) {\r\n    tens = Math.floor(floorNum / 10);\r\n    floorNum %= 10;\r\n    hasTens = true;\r\n  }\r\n\r\n  switch (floorNum) {\r\n    case 0:\r\n      floorName = `Ground Floor`;\r\n      break;\r\n    case 1:\r\n      floorName = `${floorNum}st`;\r\n      break;\r\n    case 2:\r\n      floorName = `${floorNum}nd`;\r\n      break;\r\n    case 3:\r\n      floorName = `${floorNum}rd`;\r\n      break;\r\n    default:\r\n      floorName = `${floorNum}th`;\r\n      break;\r\n  }\r\n\r\n  if (hasTens) {\r\n    floorName = tens + floorName;\r\n  }\r\n  return floorName;\r\n};\r\n","import \"./App.css\";\nimport { observer } from \"mobx-react-lite\";\nimport { Elevator } from \"./components/Elevator\";\nimport { CallButton } from \"./components/CallButton\";\nimport { getFloorName } from \"./utils/floorNames\";\n\nconst App = observer((props) => {\n  const { board } = props.board;\n\n  return (\n    <div className=\"App\">\n      {board\n        .map((floor, index) => (\n          <div key={index}>\n            <div className=\"floor-name u-bold\">{getFloorName(index)} </div>\n            <div className=\"board-wrapper\">\n              {floor.map((elevator, i) =>\n                typeof elevator === \"number\" ? (\n                  <Elevator board={props.board} key={i} elevator={elevator} />\n                ) : (\n                  <div key={i} className=\"elevator\"></div>\n                )\n              )}\n            </div>\n            <CallButton board={props.board} floor={props.board.floors[index]} />\n          </div>\n        ))\n        .reverse()}\n    </div>\n  );\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const Constants = {\r\n  suspension: 2000,\r\n  moveSpeed: 300,\r\n};\r\n","import { MovementEnum } from \"../utils/MovementEnum\";\r\nimport { Constants } from \"../utils/constants\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\n// import { elevatorBellDing } from \"./assets/elevator-bell-ding\";\r\n\r\nexport default class Elevator {\r\n  constructor(id) {\r\n    this.id = id;\r\n    this.directionIsUp = true;\r\n    this.movementStatus = MovementEnum.idle;\r\n    this.previousFloor = 0;\r\n    this.currentFloor = 0;\r\n    this.targetFloor = 0;\r\n    this.intervalId = null;\r\n    this.board = null;\r\n    this.floorInstance = null;\r\n\r\n    makeObservable(this, {\r\n      movementStatus: observable,\r\n      currentFloor: observable,\r\n      goTo: action,\r\n      suspend: action,\r\n      move: action,\r\n      moveOneFloor: action,\r\n      changeMovementStatus: action,\r\n    });\r\n  }\r\n\r\n  changeMovementStatus(status) {\r\n    this.movementStatus = status;\r\n  }\r\n\r\n  goTo(floor, board) {\r\n    this.targetFloor = floor.id;\r\n    this.directionIsUp =\r\n      this.targetFloor > this.currentFloor ||\r\n      this.targetFloor === this.currentFloor;\r\n    this.changeMovementStatus(MovementEnum.moving);\r\n    this.board = board;\r\n    this.floorInstance = floor;\r\n    this.floorInstance.setElevator(this);\r\n    this.move();\r\n  }\r\n\r\n  suspend() {\r\n    this.changeMovementStatus(MovementEnum.suspended);\r\n    setTimeout(() => {\r\n      this.changeMovementStatus(MovementEnum.idle);\r\n      this.floorInstance.clearElevator();\r\n      if (this.board.queue.length) {\r\n        this.board.orderElevator();\r\n      }\r\n    }, Constants.suspension);\r\n  }\r\n\r\n  moveOneFloor(moveUp) {\r\n    if (this.targetFloor !== this.currentFloor) {\r\n      this.previousFloor = this.currentFloor;\r\n      if (moveUp) {\r\n        this.currentFloor++;\r\n      } else {\r\n        this.currentFloor--;\r\n      }\r\n      this.board.placeElevator(this.currentFloor, this.previousFloor, this.id);\r\n    }\r\n  }\r\n\r\n  move() {\r\n    console.log(\r\n      `Elevator ${this.id} start moving... status ${this.movementStatus}`\r\n    );\r\n    this.intervalId = setInterval(() => {\r\n      this.moveOneFloor(this.directionIsUp);\r\n      if (this.targetFloor === this.currentFloor) {\r\n        clearInterval(this.intervalId);\r\n        this.suspend();\r\n      }\r\n    }, Constants.moveSpeed);\r\n  }\r\n}\r\n","import { action, makeObservable, observable } from \"mobx\";\r\n\r\nexport default class Floor {\r\n  constructor(id) {\r\n    this.id = id;\r\n    this.assignedElevator = null;\r\n\r\n    makeObservable(this, {\r\n      assignedElevator: observable,\r\n      setElevator: action,\r\n      clearElevator: action,\r\n    });\r\n  }\r\n\r\n  setElevator(elevator) {\r\n    this.assignedElevator = elevator;\r\n  }\r\n\r\n  clearElevator() {\r\n    this.assignedElevator = null;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport Board from \"./scripts/Board\";\r\nconst board = new Board(14, 5);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App board={board} />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import Elevator from \"./Elevator\";\r\nimport Floor from \"./Floor\";\r\nimport { makeObservable, observable, action } from \"mobx\";\r\nimport { MovementEnum } from \"../utils/MovementEnum\";\r\n\r\nexport default class Board {\r\n  constructor(floorsNum, elevatorsNum) {\r\n    this.floorsNum = floorsNum;\r\n    this.elevatorsNum = elevatorsNum;\r\n    this.queue = [];\r\n    this.board = this._generateBoard();\r\n    this.elevators = this._generateElevators();\r\n    this.floors = this._generateFloors();\r\n    this.placeElevatorsOnStart();\r\n    makeObservable(this, {\r\n      board: observable,\r\n      elevators: observable,\r\n      placeElevator: action,\r\n      orderElevator: action,\r\n    });\r\n  }\r\n  _generateBoard() {\r\n    if (this.elevatorsNum && this.floorsNum) {\r\n      const board = [];\r\n      for (let e = 0; e < this.floorsNum; e++) {\r\n        board.push([]);\r\n        for (let f = 0; f < this.elevatorsNum; f++) {\r\n          board[e].push(\"-\");\r\n        }\r\n      }\r\n      return board;\r\n    } else {\r\n      console.log(\r\n        `_generateBoard Should receive floorsNum, elevatorsNum but got ${this.floorsNum}, ${this.elevatorsNum}`\r\n      );\r\n    }\r\n  }\r\n\r\n  _generateElevators() {\r\n    const elevators = [];\r\n    for (let i = 0; i < this.elevatorsNum; i++) {\r\n      elevators.push(new Elevator(i));\r\n    }\r\n    return elevators;\r\n  }\r\n\r\n  _generateFloors() {\r\n    const floors = [];\r\n    for (let i = 0; i < this.floorsNum; i++) {\r\n      floors.push(new Floor(i));\r\n    }\r\n    return floors;\r\n  }\r\n\r\n  placeElevatorsOnStart() {\r\n    this.elevators.forEach((e) => {\r\n      this.placeElevator(e.previousFloor, e.currentFloor, e.id);\r\n    });\r\n  }\r\n\r\n  placeElevator(currentFloor, previousFloor, id) {\r\n    this.board[previousFloor][id] = \"-\";\r\n    this.board[currentFloor][id] = id;\r\n  }\r\n\r\n  addToQueue(floorsNum) {\r\n    this.queue.push(floorsNum);\r\n  }\r\n  nextFromQueue() {\r\n    return this.queue.shift();\r\n  }\r\n\r\n  availableElevators() {\r\n    return this.elevators.filter((e) => e.movementStatus === MovementEnum.idle);\r\n  }\r\n\r\n  getClosestElevator(elevators, floorNum) {\r\n    return elevators.reduce((prev, curr) =>\r\n      Math.abs(curr.currentFloor - floorNum) <\r\n      Math.abs(prev.currentFloor - floorNum)\r\n        ? curr\r\n        : prev\r\n    );\r\n  }\r\n\r\n  orderElevator() {\r\n    const elevators = this.availableElevators();\r\n    if (elevators.length) {\r\n      const floorNum = this.nextFromQueue();\r\n      const closestElevator = this.getClosestElevator(elevators, floorNum);\r\n      closestElevator.goTo(this.floors[floorNum], this);\r\n      console.log(`Log: ordered elevator number ${closestElevator.id}`);\r\n    }\r\n  }\r\n\r\n  sendElevator(floorNum) {\r\n    this.addToQueue(floorNum);\r\n    this.orderElevator();\r\n  }\r\n}\r\n"],"sourceRoot":""}